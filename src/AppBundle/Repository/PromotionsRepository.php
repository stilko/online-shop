<?php

namespace AppBundle\Repository;

/**
 * PromotionsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PromotionsRepository extends \Doctrine\ORM\EntityRepository
{
    public function fetchBiggestPromotion()
    {
        $today = new \DateTime();
        $qb = $this->createQueryBuilder('p');
        $result = $qb->select('p.percent')
            ->andWhere($qb->expr()->lte('p.startDate',':today'))
            ->andWhere($qb->expr()->gte('p.endDate', ':today'))
            ->setParameter('today', $today)
            ->orderBy('p.percent' ,'DESC')
            ->setMaxResults(1)
            ->getQuery()->getSingleScalarResult();

        if ($result->getOneOrNullResult() !== null) {
            return $result->getSingleScalarResult();
        }
        return 0;
    }

    public function fetchCategoriesPromotions()
    {
        $qb = $this->createQueryBuilder('p');

        $today = new \DateTime();

        $qb->select(['MAX(p.percent) as percent', 'c.id'])
            ->join('p.category', 'c')
            ->where($qb->expr()->lte('p.startDate', ':today'))
            ->andWhere($qb->expr()->gte('p.endDate', ':today'))
            ->andWhere($qb->expr()->isNotNull('p.category'))
            ->setParameter(':today', $today)
            ->groupBy('c')
            ->orderBy('p.percent', 'DESC');

        $results = $qb->getQuery()->getResult();

        $promotions = [];
        foreach ($results as $promotion) {
            $promotions[(int)$promotion['id']] = (int)$promotion['percent'];
        }
        return $promotions;
    }
}
